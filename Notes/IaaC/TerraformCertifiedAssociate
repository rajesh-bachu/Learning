Terraform Certified Associate

Question types:
    - True/False
    - Multiple Choice
    - Multiple Choice - Multiple Answer
    - Text Match (Fill in the blanks)

Advantages of Certification:
    - Verify your skills as IaC practitioner
    - Expand skills and knowledge about Tf & best practices
    - Get more insight into the Enterprise features of Terraform
    - Solidify Tf fundementals and kickstart your journey to more advanced deployments.

IaC and its benefits
    - No more clicks
        - Write down what you want to deploy as human readable.
    - Enables DevOps
        - Codification of deployment means it can be tracked in version control enabling better visibility and collaboration across teams.
    - Declare your infrastructure
        - Infrastructure is, for the majority of cases, written declaratively via code but can be procedural(imperative) too!
    - Speed, Cost, and Reduced Risk
        - Less human intervention during deployment means fewer chances of security flaws, superfluous resources, and more time is saved!
     
Hashicorp Configuration Languague (HCL) > Coding language for Terraform.

Cloud Agnostivc IaC with Terraform:
    - Automate Software Defined Network
    - Interacts and takes care of communication with control layer APIs with ease.
    - Supports a vast array of private and public cloud vendors.
    - Racks state of each resource deployed!

What is the Terraform Workflow?
    - Write
        This would generally start off with creating a GitHub repo as a common best practice.
    - Plan
        You'll continually add and review changes to code in your project.
    - Apply
        After one last review/plan, you'll be ready to provision real infrastructure.

Terraform Init (Initializing the Working Directory)
    - Initializes the working directory that contains your Terraform Code.
        Downloads ancillary components (modules and plugins)
        Sets up backend (for storing Terraform state file, a mechanism by which Terraform tracks resources.)
    
Terraform Key Concepts: Plan, Apply, and Destroy
    - Plan
        - Reads the code and then creates and shows a "plan" of execution/deployment
            Note: This command does not deploy anything. Consider this a read-only command.
        - Allows the user to review the action plan before executing anything.
        - At this stage, authentication credentials are used to connect to your infrastructure, if required.
    - Apply
        - Deploys the instructions and statements in the code
        - Updates the deployment state tracking mechanism file, a.k.a. "State file"
    - Destroy
        - Looks at the recorded, stored state file created during deployment and destroys all resources created by your code
        - Should be used with caution, as it is non-reversible command. Take backups, and be sure that you want to delete your infrastructure.

Resource addressing in Terraform: Understanding Terraform Code
    - Terraform Code snippet (Configuring the provider)
    - AWS provider
        provider "aws"{
            region = "us-east-1"
        }
    - GCP provider
        provider "google"{
            credentials = file("credentials.json")
            project = "my-gcp-project"
            region = "us-west-1"
        }

    - Resource
        resource "aws_instance" "web" {
            ami = "ami-123"
            instance_type = "t2.micro"

        }   

        resource = reserved keyword
        aws_instance = Resource provided by Terraform provider
        web = User-provided arbitrary resource name
        ami, instance_type = resource config arguments

        Resource Address = aws_instance.web 

        data "aws_instance" "my-vm"{
            instance_id = "i-1234"
        }
        Resource Address = data.aws_instance.my-vm
    
    - Terraform executes the code in files with the .tf extension.
    - Initially, Terraform looks for providers in the Terraform providers registry

Providers:
    - Providers are terraform's way of abstracting integrations with API control layer of the infrastructure vendors.
    - Terraform, by default, looks for Providers in the Terraform providers registry.
    - Providers are plugins. They are released on a separate rhythm from Terraform itself, and each provider has its own series of version numbers.    
    - You can write your own custom providers as well
    - Terraform finds and installs providers when initializing working directory (via terraform init).
    - As a best practice Providers should be pegged down to a specific version, so that any changes across provider version doesn't break your Terraform code.

Terraform State:
    - Resource Tracking!
        - A way for Terraform to keep tabs on what has been deployed.
        - Critical to Terraforms functionality
        - Stored in flat files, by default named "terraform.tfstate"
        - Helps Terraform calculate deployment delta and create new deployment plans.
        - Never lose your Terraform State file!

Terraform Variables and Outputs:
    variable "my-var"{
        description = "My Test Variable"
        type = string
        default = "Hello"
    } 
    variable = reserved keyword
    User provided variable name = my-var
    variable config arguments such as type of variable and default value

    variable can also be declared as 
        variable "my-var" {}
        but in this case, you have to pass variable on runtime or as os environmental variable
    
    Referencing a variable: var.my-var
    - Best practice is to have variables in a different file: terraform.tfvars

    - Variable validation:
        variable "my-var"{
            description = "My Test Variable"
            default = "Hello"
            validation{
                condition = length(var.my-var) > 4
                  error_message = "The string must be more than 4 characters" #experimental feature in 0.12, available open from 0.13
            }
        }

        sensitive = True

        Base types:
            - string
            - number
            - bool
        Complex Types:
            - list, set, map, object, tuple
        OS environmental variables have precedence over Terraform Environmental variables

        Terraform Output - Output Values:
            output "instance_ip"{
                description = "VM's Private IP"
                value = aws_instance.my-vm.private.ip
            }
            - Output variable values are show on the shell after running terraform apply.
            - Output values are like return values that you want to track after a successful Terraform deployment.

Terraform Provisioners: When you use them?
    - Terraforms way of bootstrapping custom scripts, commands or actions
    - Can be run either locally (on the same system where Terraform commands are being issued from), or remotely on resources spun up through the Terraform deployment.
    - Within Terraform code, each individual resource can have its own "provisioner" defining the connection method (if required such as SSH or WinRM) and the actions/commands or script to execute.
    - There are 2 types of provisioners: "Creation-time" and "Destroy-time" provisioners which you can set to run when a resource is being created or destroyed.

    Best Practices and Cautions When Using Provisioners:
        - DISCLAIMER: Hashicorp recommends using Provisioners as a last resort and to try using inherent mechanisms within your infrastructure deployment to carry out custom tasks where possible.
            eg: Hashicorp recommends using EC2 user data rather than Terraform Provisioners.
        - Terraform cannot track changes to provisioners as they can take any independent action, hence they are not tracked by Terraform state files.
        - Provisioners are recommended for use when you want to invode actions not covered by Terraforms declarative model.
        - If the command within a provisioner returns non-zero return code, it's considered failed and underlying resource is tainted.
            Syntax of provisioner:
                resource "null_resource" "dummy_resource" {
                    provisioner "local-exec"{
                        command = "echo '0' > status.txt
                    }
                    provisioner "local-exec"{
                        when = destroy
                        command = "echo '1' > status.txt"
                    }
                }

Terraform State commands:

Terraform State: (State matters a lot!)
    - Simply put, it maps real-world resources to Terraform configuration.
    - By default, state is stored locally in a file called terraform.tstate (locally or remote as S3)
    - Prior to any modification operation, Terraform refreshes the state file.
    - Resource dependency metadata is also tracked via the state file.
    - Helps boost deployment performance by caching resource attributes for subsequent use.

Terraform State Command:
    - Terraform State command is a utility for manipulating and reading the Terraform state file
    - Scenario
        - Advanced state management
        - Manually remove a resource from Terraform State file so that it's not managed by Terraform
        - Listing out tracked resources and their details (via state and list subcommands)

        Common Terraform State commands
        - terraform state list > List out all resources tracked by the terraform state file
        - terraform state rm > Delete a resource from the Terraform state file
        - terraform state show > Show details of a resource tracked in the Terraform state file.
    
    - Local and Remote State Storage
        - Local State Storage
            - Saves Terraform state locally on your system.
            - Terraforms default behaviour
        - Remote State Storage
            - Saves state to a remote data source. Optional.
              Examples of storage: AWS S3, Google Storage
            - Allows sharing state file between distributed teams.
            - Remote state accessible to multiple teams for collaboration

        - State locking
            - Allows locking state so parallel executions don't coincide
            
        - State file: Enables sharing "output" values with other Terraform configuraiton or code.

Terraform Modules:
    - A moduleis a container for multiple resources that are used together.
    - Main purpose is to re-use the code elsewhere
    - Every terraform configuration has atleast one module, called the root module, which consists of code files in your main working directory.

    Accessing Terraform Modules 
        - Modules can be downloaded and referenced from:
            - Terraform Public registry
            - A private registry
            - Your local system
        - Modules are referenced using a module block.
            module "my-vpc-module" {
                source = "./modules/vpc" > Module source (mandatory)
                version = "0.0.5"        > Module version
                region = var.region
            }
            Other allowed parameters: count, for_each, providers, depends_on

        - Modules can optionally take input and provide outputs to plug back into your main code.

Interacting with Terraform Module Inputs and Outputs:
    Declaring Module in code:
        - Module inputs are arbitrarily named parameters that you pass inside the module block.
        - These inputs can be used as variables inside the module code. 
    Terraform Module outputs:
        - The outputs declared inside Terraform module code can be fed back into the root module or your main code.

Terraform Built-in functions:
    - Terraform comes pre-packaged with functions to help you transform and combine values.
    - User-defined functions are not allowed - only built-in ones.
    - General syntax: function_name()
    - Built-in functions are extremely useful in making Terraform code dynamic and flexible.
    - eg: file, max, flatten

Type Constraints - Terraform Variables
    - Type constraints control the type of variable values
        - number
        - string
        - bool

        Complex:
            - list
            - tuple
            - map
            - object
            Two types of complex:
                - Collection types allow multiple values of one primitive type to be grouped together.
                    - Constructors for these collections include:
                        - list(type)
                        - map(type)
                        - set(type)  
                - Structural types allow multiple values of different primitive types to be grouped together.
                    - Constructors for these Collections include:
                        - object(type)
                        - tuple(type)
                        - set(type)
                - Dynamic Types - The 'any' constraint
                    - any is a placeholder for a primitive type yet to be decided.
                    - Actual type will be determined at runtime

Terraform Dynamic Blocks:
    What are Dynamic Blocks?
        - Dynamically constructs repeatable nested configuration blocks inside Terraform resources
        - Supported within the following block types:
            - resource
            - data
            - provider
            - provisioner
        - Used to make your code look cleaner
        - Dynamic blocks expect a complex variable type to iterate over.
        - It acts like a for loop and outputs a nested block for each element in your variable.
        - Be careful not to overuse dynamic blocks in your main code, as they can be hard to read and maintain.
        - Only use dynamic blocks when you need to hide detail in order to build a cleaner user interface when writing reusable modules.

Terraform CLI
    - Terraform fmt
        - Formats Tf code for readability
        - Helps in keeping code consistent
        - Safe to run at any runtime
    
        Scenario:
            - Before pusing code to version control
            - After upgrading Terraform or its modules
            - Anhy time you've made changes to code.
    
    - Terraform taint
        - Taints a resource, forcing it to be destroyed and recreated
        - Modifies the state file, which causes the recreation Workflow
        - Tainting a resource may cause other resources to be modified.
        - Command syntax: terraform taint Resource_address
            - Scenario\:
                - To cause provisioners to run
                - Replace misbehaving resources forcefully
                - To mimic side effects of recreation not modeled by any attributes of the resource.
    
    - Terraform import
        - Maps existing resources to Terraform using an ID
        - ID is dependent on the underlying vendor, for example to import an AWS EC2 instance you'll need to provide its instance ID.
        - Importing the same resource to multiple Terraform resources can cause unknown behavior and is not recommended.
        - Syntax: terraform import Resource_Address ID
            - Scenario:
                - When you need to work with existing resources
                - Not allowed to create new resources
                - When you're not in the control of creation process of infrastructure.
    - Terraform Configuration Block
        - A special configuration block for controlling Terraforms own behavior.
        - The block only allows constant values, named resources and variables are not allowed in it.
            - Examples includes:
                - Configuring backend for storing state files
                - Specifying a required Terraform version
                - Specifying a required Terrafrom provider version and its requirements
                - Enable and test Terraform experimental features
                - Passing metadata to providers.

Terraform Workspaces (CLI)
    - The Terraform Workspaces are alternate state files within the same working directory.
    - Terraform starts with a single workspace that is always called default. It cannot be deleted.
    - terraform workspace new <workspace-name> = create a workspace
    - terraform workspace select <workspace-name> = select a workspace
        - Scenario:
            - Test changes using a parallel, distinct copy of infrastructure.
            - It can be modeled against branches in version control such as Git.
    - Workspaces are meant to share resources and to help enable collaboration.      
    - Access to a Workspace name is provided through the ${terraform.workspace} variable.

Debugging Terraform:
    - TF_LOG is an environmental variable for enabling verbose logging in Terraform. 
      By default, it will send logs to stderr (standard error output).
    - Can be set to the following levels: TRACE, DEBUG, INFO, WARN, ERROR
    - TRACE IS THE MOST VERBOSE LEVEL OF LOGGING AND THE MOST relaiable one
    - To persist logged output, use the TF_LOG_PATH environmental variable.
    - Setting logging environment variables for Terraform on Linux:
        export TF_LOG=TRACE
        export TF_LOG_PATH=./terraform.log

Terraform Cloud and Enterprise
    - Best practices to secure Terraform code and deployments   
        - Hashicorp Sentinel
        - Terraform Vault provider
    - Difference between Terraform OSS and Enterprise offerings
    - Summarize benefits and usage of Terraform Cloud

Benifits of Sentinel (Embedded Policy-as a Code)
    - Enforces policies on your code.
    - Has its own policy language - Sentinel language
    - Designed to be approachabe by non-programmers.
    - Sandboxing - Guardrails for automation
    - Codification - Easier Understanding, better collaboration
    - Version control
    - Testing and automation
    Use-cases
        - For enforcing CIS standards across AWS Accounts
        - Checking to make sure only t3.micro instance types are used.
        - Ensuring Security Groups do not allow openly allowed traffic on port 22

Terraform Vault provider for Injecting Secrets Securely:
    - Secrets management Software
    - Dynamically provisions credentials and rotates them
    - Encrypts sensitive data in transit and at rest and provides fine-grained access to secrets using ACLs.
        - benefits
            - Developers don't need to manage long-lived credentials
            - Inject secrets into your Terraform deployment at runtime.
            - Fine-grained ACLs for access to temporary credentials.

Benefits of Terraform Registry and Terraform Cloud Workspaces:
Terraform Registry:
    - A repository of publicly available Terraform providers and modules
    - You can publish and share your own modules, too
    - You can collaborate with other contributors to make changes to providers and modules.
    - Can be directly referenced in your Terraform code!

Terraform Cloud Workspaces:
    - Directories hosted in Terraform Cloud!
    - Stores old versions of state files by default.
    - Maintains a record of all execution activity.
    - All Terraform commands executed on "managed" Terraform Cloud VMs

Differentiation b/w Terraform OSS and Terraform Cloud Workspaces
Terraform OSS Workspaces"
    - Stores alternate state files in same working directory.

OSS vs Cloud Workspaces:
    Component           |       Workspace       | CloudWorkspace    
    Terraform configuraiton    On disk              In linked version control repository or priodically uploaded via API/cli
    Variable values            as .tfvars files, as cli or in shell     In terraform cloud
    State               Disk or in remote backend       In Terraform cloud workspace
    Credentials and secrets     In shell env or entered as prompts      In workspace(cloud) stored as sensitive variables.


Benefits of Terraform Cloud: (Summary)
    - Remote terraform execution
    - Workspace based org model
    - Version control integration (Github, Bitbucket etc,)
    - Remote state management and cli integration
    - Private terraform module Registry
    - Cost estimation and Sentinel integration features.
    


















